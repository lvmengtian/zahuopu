===============================
Leetcode 680. 验证回文字符串 Ⅱ
===============================

题目描述
---------
给定一个非空字符串 s，最多删除一个字符。判断是否能成为回文字符串。

::

  示例 1:
  输入: "aba"
  输出: True
  
  示例 2:
  输入: "abca"
  输出: True
  解释: 你可以删除c字符。

.. note:: 

  注意:
  字符串只包含从 a-z 的小写字母。字符串的最大长度是50000。

思路
-----
首先按照正常的思路判断该字符串是否是回文串。使用2个指针 ``left`` 和 ``right`` 分别从左右向中间遍历，
当 ``s[left] != s[right]`` 时说明该字符串不是回文串。此时我们可以去除每一个字符，然后验证剩余的字符串
是否是回文串，此时的时间复杂度是 :math:`O(n^2)` 。

由于题目限制了最多只能删除一个字符，所以当 ``s[left] != s[right]`` 时，我们只需删除 ``left`` 和 ``right`` 位置
对应的字符串即可，然后分别判断这2个字符串是否是回文串，如果是返回 ``True`` , 否则返回 ``False``

代码
------

.. code-block:: python

  def validPalindrome(self, s):
    # 先判断本身是否是回文
    flag, l, r = self.isPalindrome(s)
    if flag:
        return True

    # 不是回文的时候，删除左侧位置
    new_s = s[l+1:] if l == 0 else s[:l] + s[l+1:]
    flag1, l1, r1 = self.isPalindrome(new_s)

    # 不是回文的时候，删除右侧位置
    new_s = s[:r] if r == len(s) - 1 else s[:r] + s[r+1:]
    flag2, l2, r2 = self.isPalindrome(new_s)

    return flag1 or flag2

  def isPalindrome(self, s):
    l = 0
    r = len(s)-1
    while l < r:
        if s[l] != s[r]:
            return False, l, r
        l += 1
        r -= 1
    return True, l, r


::

  来源：力扣（LeetCode）
  链接：https://leetcode-cn.com/problems/valid-palindrome-ii
  著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。