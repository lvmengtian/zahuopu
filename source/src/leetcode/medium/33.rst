==============================
Leetcode 33. 搜索旋转排序数组
==============================

题目描述
--------
假设按照升序排序的数组在预先未知的某个点上进行了旋转。

( 例如，数组 ``[0,1,2,4,5,6,7]`` 可能变为 ``[4,5,6,7,0,1,2]`` )。

搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 ``-1`` 。

你可以假设数组中不存在重复的元素。

你的算法时间复杂度必须是 :math:`O(log^n)` 级别。

::

  示例 1:
  输入: nums = [4,5,6,7,0,1,2], target = 0
  输出: 4

  示例 2:
  输入: nums = [4,5,6,7,0,1,2], target = 3
  输出: -1

思路
-------
题目提示了使用 :math:`O(log^n)`，所以可以想到使用二分查找。但是我们又知道二分查找是用在
有序数组上的，此题中数组不是无序嘛？

由于题目中的数组是有序数组旋转得到的，所以数组是分段有序的。例如题目中的
``[4,5,6,7,0,1,2]``，我们可以分成2段看：``[4, 5, 6, 7]`` 和 ``[0, 1, 2]``。所以
还是可以使用二分查找，但是和正常的二分查找还是有一定区别的。

.. image:: /_static/images/leetcode/leetcode-33.png



代码
------

.. code-block:: python
  :linenos:

  def search(self, nums, target):
    """
    :type nums: List[int]
    :type target: int
    :rtype: int
    """
    l = 0
    r = len(nums) - 1
    while l <= r:
        mid = (l + r) / 2
        if nums[mid] == target:
            return mid
        elif nums[mid] >= nums[0]:
            if nums[0] <= target < nums[mid]:
                r = mid - 1
            else:
                l = mid + 1
        else:
            if nums[mid] < target <= nums[len(nums) - 1]:
                l = mid + 1
            else:
                r = mid - 1
    return -1

::

  来源：力扣（LeetCode）
  链接：https://leetcode-cn.com/problems/search-in-rotated-sorted-array
  著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。