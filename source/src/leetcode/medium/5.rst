========================
Leetcode 5. 最长回文子串
========================

题目描述
----------
给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。

.. code-block:: text

  示例 1：
  输入: "babad"
  输出: "bab"
  注意: "aba" 也是一个有效答案。

  示例 2：
  输入: "cbbd"
  输出: "bb"

思路
----
通过特殊符号将字符串分割，使得字符串长度为奇数。则可以逐步遍历字符串，然后判断以下标`i`为中心的最长回文串，并返回左右边界下标。

代码
----

.. code-block:: java
  :linenos:

  // java
  public String longestPalindrome(String s){
    if (s.length() <= 1) {
        return s;
    }
    s = join(s);
    int minLeft = 0, maxRight = 0;
    for (int i = 0, len = s.length(); i < len; i++) {
        int[] res = findLeftAndRight(s, i);
        int left = res[0];
        int right = res[1];
        if (right - left > maxRight - minLeft){
            maxRight = right;
            minLeft = left;
        }
    }
    String ans = s.substring(minLeft, maxRight + 1);
    return ans.replace("#", "");
  }

  private String join(String s) {
      char[] chs = s.toCharArray();
      StringBuilder sb = new StringBuilder();
      sb.append("#");
      for (char ch : chs) {
          sb.append(ch + "#");
      }
      return new String(sb);
  }

  private int[] findLeftAndRight(String s, int idx) {
      int left = idx, right = idx;
      while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
          left--;
          right++;
      }
      return new int[]{left + 1, right - 1};
  }

.. code-block:: python
  :linenos:

  # python
  def longestPalindrome(s):
    """
    :type s: str
    :rtype: str
    """
    if not s or len(s) == 1:
        return s
    # 使用特殊字符分割字符串，使之成为基数长度
    new_s = '#' + '#'.join(s) + '#'
    min_left = max_right = 0

    for idx in range(len(new_s)):
        l, r = func(new_s, idx)
        if r - l > max_right - min_left:
            min_left, max_right = l, r

    res = new_s[min_left:max_right+1]
    return res.replace('#', '')

  def func(s, idx):
    l = r = idx
    while l >= 0 and r < len(s) and s[l] == s[r]:
        l -= 1
        r += 1
    return l + 1, r - 1


.. code-block:: text

  来源：力扣（LeetCode）
  链接：https://leetcode-cn.com/problems/longest-substring-without-repeating-characters
  著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。