==================================
Leetcode 8. 字符串转换整数 (atoi)
==================================

题目描述
----------
请你来实现一个 ``atoi`` 函数，使其能将字符串转换成整数。

首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。接下来的转化规则如下：

如果第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字字符组合起来，形成一个有符号整数。
假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成一个整数。
该字符串在有效的整数部分之后也可能会存在多余的字符，那么这些字符可以被忽略，它们对函数不应该造成影响。
注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换，即无法进行有效转换。

在任何情况下，若函数不能进行有效的转换时，请返回 0 。

.. note::

  本题中的空白字符只包括空格字符 ' ' 。

  假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。


.. code-block:: text

  示例 1:
  输入: "42"
  输出: 42

  示例 2:
  输入: "   -42"
  输出: -42
  解释: 第一个非空白字符为 '-', 它是一个负号。
       我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。
  
  示例 3:
  输入: "4193 with words"
  输出: 4193
  解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。
  
  示例 4:
  输入: "words and 987"
  输出: 0
  解释: 第一个非空字符是 'w', 但它不是数字或正、负号。
      因此无法执行有效的转换。
  
  示例 5:
  输入: "-91283472332"
  输出: -2147483648
  解释: 数字 "-91283472332" 超过 32 位有符号整数范围。 
       因此返回 INT_MIN (−231) 。


思路
----------
排除左侧一些非字符串元素之后，逐个字符遍历并更新结果。注意点有：

1. 注意字符串为空或者全部是空格的情况
2. 注意第一个字符串是 ``-`` he  ``+`` 的情况
3. 判断是否超过最大数值时不要直接加完之后再判断，可能会越界。

代码
----------
.. code-block:: python
  :linenos:
  
  def myAtoi(self, s):
    """
    :type str: s
    :rtype: int
    """
    if not s or not s.lstrip():
        return 0
    INT_MAX = 2 ** 31 - 1
    INT_MIN = -1 * (2 ** 31)
    s = s.lstrip()
    first_ch = s[0]
    res = 0
    if first_ch == '-':
        positive = False
    elif first_ch == '+':
        positive = True
    elif first_ch.isdigit():
        positive = True
        res = int(first_ch)
    else:
        return 0
    for ch in s[1:]:
        if not str(ch).isdigit():
            break
        if res > (INT_MAX - int(ch)) / 10:
            return INT_MAX if positive else INT_MIN
        res = res * 10 + int(ch)
    return res if positive else -res

::

    来源：力扣（LeetCode）
    链接：https://leetcode-cn.com/problems/string-to-integer-atoi
    著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
